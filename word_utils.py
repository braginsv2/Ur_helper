from docx import Document
import os
from datetime import datetime
import sqlite3
import pandas as pd
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows

def replace_words_in_word(search_words, replace_words, input_path, output_path):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    arg[0] = ["–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å"]
    arg[1] = ["–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å"]
    arg[2] ="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É"
    arg[3]= "–ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É"
    """
    
    try:
        if len(search_words) != len(replace_words):
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return False
        
        if not os.path.exists(input_path):
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
            return False
        
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        doc = Document(input_path)
        replacements = dict(zip(search_words, replace_words))
        replacement_count = 0
        
        def replace_preserving_format(paragraph):
            nonlocal replacement_count
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            char_formatting = []
            text_parts = []
            
            for run in paragraph.runs:
                for char in run.text:
                    char_formatting.append({
                        'font_name': run.font.name,
                        'font_size': run.font.size,
                        'bold': run.font.bold,
                        'italic': run.font.italic,
                        'underline': run.font.underline,
                        'color': run.font.color.rgb
                    })
                text_parts.append(run.text)
            
            full_text = ''.join(text_parts)
            new_text = full_text
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
            for search_word, replace_word in replacements.items():
                if search_word in new_text:
                    new_text = new_text.replace(search_word, replace_word)
                    replacement_count += 1
            
            if new_text != full_text:
                paragraph.clear()
                
                if char_formatting and len(char_formatting) >= len(full_text):
                    current_format = None
                    current_run = None
                    
                    for i, char in enumerate(new_text):

                        if i < len(char_formatting):
                            char_format = char_formatting[min(i, len(char_formatting) - 1)]
                        else:
                            char_format = char_formatting[-1] if char_formatting else {}
                        
                        if current_format != char_format:
                            current_run = paragraph.add_run()
                            if char_format.get('font_name'):
                                current_run.font.name = char_format['font_name']
                            if char_format.get('font_size'):
                                current_run.font.size = char_format['font_size']
                            if char_format.get('bold'):
                                current_run.font.bold = char_format['bold']
                            if char_format.get('italic'):
                                current_run.font.italic = char_format['italic']
                            if char_format.get('underline'):
                                current_run.font.underline = char_format['underline']
                            if char_format.get('color'):
                                current_run.font.color.rgb = char_format['color']
                            current_format = char_format
                        
                        current_run.text += char
                else:
                    paragraph.add_run(new_text)
        
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():
                replace_preserving_format(paragraph)

        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        if paragraph.text.strip():
                            replace_preserving_format(paragraph)
        

        
        doc.save(output_path)
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        print(f"üìä –ó–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {replacement_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def create_fio_data_file(data_dict):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è —Å —É—á–µ—Ç–æ–º –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    if 'fio' not in data_dict:
        return "–û—à–∏–±–∫–∞: –í —Å–ª–æ–≤–∞—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á 'fio'"
    
    fio = data_dict['fio']
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É fio, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    fio_dir = str(fio)
    if not os.path.exists(fio_dir):
        os.makedirs(fio_dir)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = os.path.join(fio_dir, f"{fio}_data.txt")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if os.path.exists(file_path):
        os.remove(file_path)
    
    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ data.txt
    template_path = 'data.txt'
    if not os.path.exists(template_path):
        return "–û—à–∏–±–∫–∞: –§–∞–π–ª data.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    
    try:
        with open(template_path, 'r', encoding='utf-8') as template_file:
            lines = template_file.readlines()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        result_lines = []
        for line in lines:
            line = line.strip()
            if ':' in line:
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                field_name, variable = line.split(':', 1)
                field_name = field_name.strip()
                variable = variable.strip()
                
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/None
                if variable in data_dict:
                    value = data_dict[variable]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –Ω–µ None –∏ –Ω–µ —Ä–∞–≤–Ω–æ 0 –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    if value is not None and str(value).strip() != '' and value != 0:
                        result_lines.append(f"{field_name}: {value}")
                # –ò–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É (—É–¥–∞–ª—è–µ–º)
            else:
                # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    result_lines.append(line)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as output_file:
            for line in result_lines:
                output_file.write(line + '\n')
        
        return f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {file_path}"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"

def export_clients_db_to_excel(db_path='clients.db', output_path='clients_export.xlsx'):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö clients.db –≤ Excel —Ñ–∞–π–ª
    
    Args:
        db_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞
    """
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -> –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î
    column_mapping = {
        '‚Ññ –ö–ª–∏–µ–Ω—Ç–∞': 'client_id',
        '–ì–æ—Ä–æ–¥': 'city',
        '–ö–ª–∏–µ–Ω—Ç –§–ò–û': 'fio',
        '–î–∞—Ç–∞ –î–¢–ü': 'date_dtp',
        '–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞': 'marks',
        '–ù–æ–º–µ—Ä –∞–≤—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞': 'car_number',
        '–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è': 'insurance',
        '–í–∏–Ω–æ–≤–Ω–∏–∫ –§–ò–û –ü–æ–ª–Ω–æ—Å—Ç—å—é': 'fio_culp',
        '–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å –≤–∏–Ω–æ–≤–Ω–∏–∫–∞': 'marks_culp',
        '–ù–æ–º–µ—Ä –∞–≤—Ç–æ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞': 'number_auto_culp',
        '–î–∞—Ç–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞—Ö–æ–≤—É—é': 'date_ins',
        '–î–∞—Ç–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –°–¢–û': 'date_zayav_sto',
        '–î–∞—Ç–∞ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏': 'date_pret',
        '–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –æ–º–±—É—Ü–º–µ–Ω—É': 'date_ombuc',
        '–î–∞—Ç–∞ –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è': 'date_isk',
        '–°—É–¥': 'sud',
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(db_path):
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        conn = sqlite3.connect(db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        if not tables:
            print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü!")
            conn.close()
            return False
            
        print(f"–ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—â–µ–º —Ç–∞–±–ª–∏—Ü—É 'clients'
        table_name = None
        for table in tables:
            if 'client' in table[0].lower():
                table_name = table[0]
                break
        
        if not table_name:
            table_name = tables[0][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns_info = cursor.fetchall()
        available_columns = [col[1] for col in columns_info]
        
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {available_columns}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î)
        select_columns = []
        russian_headers = []
        
        for rus_name, db_name in column_mapping.items():
            if db_name in available_columns:
                select_columns.append(db_name)
                russian_headers.append(rus_name)
            else:
                print(f"–ü–æ–ª–µ '{db_name}' ({rus_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        if not select_columns:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–∞—é—â–µ–≥–æ –ø–æ–ª—è!")
            conn.close()
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = f"SELECT {', '.join(select_columns)} FROM {table_name}"
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        df.columns = russian_headers
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å {len(df.columns)} –ø–æ–ª—è–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ö–ª–∏–µ–Ω—Ç—ã"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
        for r in dataframe_to_rows(df, index=False, header=True):
            ws.append(r)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        
        for col in range(1, len(russian_headers) + 1):
            cell = ws.cell(row=1, column=col)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            
            adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 50
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        ws.freeze_panes = "A2"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(output_path)
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(df.columns)}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

