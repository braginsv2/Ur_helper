import telebot
from telebot import types
from config import TOKEN
import dtp
import pit
import no_osago
from word_utils import create_fio_data_file, export_clients_db_to_excel
import json
import sqlite3
import time
import os
from database import DatabaseManager, get_client_from_db_by_client_id, search_clients_by_fio_in_db
from telebot.apihelper import ApiException
from telebot.handler_backends import ContinueHandling, CancelUpdate
bot = telebot.TeleBot(TOKEN)
db = DatabaseManager()


@bot.message_handler(commands=['start'])
def start_handler(message):
    clear_chat_history_optimized(message, 50)
    keyboard = types.InlineKeyboardMarkup()
    
    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="btn_new_client")
    btn2 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ", callback_data="btn_search_database")
    btn3 = types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="btn_output")
    keyboard.add(btn1)
    keyboard.add(btn2)
    keyboard.add(btn3)
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", 
        reply_markup=keyboard
    )
def callback_client_details2(message, client_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º answer_ins"""

    print(f"DEBUG callback_client_details: client_id = {client_id}")
    try:
        user_id = message.from_user.id
        client = get_client_from_db_by_client_id(client_id)
        if not client:
            bot.send_message(message.chat.id, f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            if client.get('data_json'):
                client_data = json.loads(client['data_json'])
            else:
                client_data = {}
        except (json.JSONDecodeError, TypeError):
            client_data = {}
        
        details = f"""üë§ –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞:

üìã ID: {client['client_id']}
üë§ –§–ò–û: {client['fio']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {client.get('car_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –î–∞—Ç–∞ –î–¢–ü: {client.get('date_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üïê –í—Ä–µ–º—è –î–¢–ü: {client_data.get('time_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìç –ê–¥—Ä–µ—Å –î–¢–ü: {client_data.get('address_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è: {client.get('insurance', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üÜî –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {'–î–∞' if client_data.get('sobstvenik') == 'Yes' else '–ù–µ—Ç'}
"""
        dop_osm =client.get('dop_osm', '') or client_data.get('dop_osm', '')
        answer_ins = client.get('answer_ins', '') or client_data.get('answer_ins', '')
        analis_ins = client.get('analis_ins', '') or client_data.get('analis_ins', '')
        pret = client.get('pret', '') or client_data.get('pret', '')
        pret_sto = client.get('pret_sto', '') or client_data.get('pret_sto', '')
        ombuc = client.get('ombuc', '') or client_data.get('ombuc', '')
        keyboard = types.InlineKeyboardMarkup()
        del client['data_json']
        time.sleep(0.5)
        dtp.user_temp_data[user_id] = client
        if client['accident']=='dtp' and client['Done'] !="Yes":
            if (not dop_osm or dop_osm == '') and (not answer_ins or answer_ins == ''):
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data="dopOsm"
                ))
            elif not answer_ins or answer_ins == '':
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"continuefilling"
                ))
            elif ((analis_ins == '') or (not analis_ins)) and (answer_ins != ''):
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"next"))
            elif (pret_sto == '') or (not pret_sto):
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextPrSto"))
            elif ((pret == '') or (not pret)) and (answer_ins != '') and (analis_ins != ''):
    
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextPr"))
            elif ((ombuc == '') or (not ombuc)) and (answer_ins != '') and (analis_ins != '') and (pret != ''):
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextO"))
            elif answer_ins =="NOOSAGO":
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"IskNOOSAGO"))
        elif client['accident']=='pit' and client['Done'] !="Yes":
            if analis_ins =="Yes":
                user_id = message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data="pit_next"))
        keyboard.add(types.InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="btn_search_database"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu"))
        keyboard.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="edit_db"))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", callback_data="view_db"))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="view_docs"))
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="download_docs"))
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=details,
            reply_markup=keyboard
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {e}")
dtp.init_bot(bot, start_handler, callback_client_details2)
pit.init_bot(bot, start_handler, callback_client_details2)
no_osago.init_bot(bot, start_handler, callback_client_details2)

@bot.callback_query_handler(func=lambda call: call.data == "btn_new_client")
def callback_handler(call):
    clear_chat_history_optimized(call.message, 100)
    import dtp
    import pit
    import no_osago
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–¢–æ–ª—å–∫–æ —Å –î–¢–ü", callback_data="btn_dtp")
    btn2 = types.InlineKeyboardButton("–ü–æ–¥–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ", callback_data="btn_podal_zayavl")
    btn3 = types.InlineKeyboardButton("–ü–æ—Å–ª–µ —è–º—ã", callback_data="btn_pit")
    btn4 = types.InlineKeyboardButton("–ù–µ—Ç –û—Å–∞–≥–æ", callback_data="btn_net_osago")
    keyboard.add(btn1)
    keyboard.add(btn3)
    bot.send_message(
        call.message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", 
        reply_markup=keyboard
    )
@bot.callback_query_handler(func=lambda call: call.data == "btn_output")
def callback_output(call):
    chat_id = call.message.chat.id
    file_path = "clients_export.xlsx"
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        bot.send_message(
            chat_id,
            "‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=None
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        success = export_clients_db_to_excel("clients.db", file_path)
        
        if success and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as document_file:
                bot.send_document(
                    chat_id,
                    document_file,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
                )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(file_path)
                print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except OSError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            

            
        else:
            bot.send_message(
                chat_id, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
    
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except:
                pass
        
        bot.send_message(
            chat_id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
        )
        print(f"–û—à–∏–±–∫–∞ –≤ callback_output: {e}")
    
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start_handler(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "btn_search_database")
def callback_search_database(call):
    message = bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üîç –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=None
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    bot.register_next_step_handler(message, search_clients_handler)

def search_clients_by_fio(search_term):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û"""
    
    print(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: '{search_term}'")
    
    db_manager = DatabaseManager()
    conn = sqlite3.connect(db_manager.db_path)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
    cursor.execute("SELECT COUNT(*) FROM clients")
    total_count = cursor.fetchone()[0]
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total_count}")
    
    if total_count == 0:
        conn.close()
        return []
    
    results = []
    search_term = search_term.strip()
    
    # 1. –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_patterns = [
        search_term,
        search_term.lower(),
        search_term.upper(),
        search_term.title()
    ]
    
    for pattern in exact_patterns:
        query = '''
        SELECT id, client_id, fio, number, car_number, date_dtp, created_at, 
               COALESCE(data_json, '{}') as data_json
        FROM clients 
        WHERE fio = ?
        ORDER BY id DESC
        '''
        
        try:
            cursor.execute(query, (pattern,))
            exact_results = cursor.fetchall()
            if exact_results:
                results.extend(exact_results)
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(exact_results)}")
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            continue
    
    # 2. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if not results:
        partial_patterns = [
            f"%{search_term}%",
            f"%{search_term.lower()}%",
            f"%{search_term.upper()}%",
            f"%{search_term.title()}%"
        ]
        
        for pattern in partial_patterns:
            query = '''
            SELECT id, client_id, fio, number, car_number, date_dtp, created_at, 
                   COALESCE(data_json, '{}') as data_json
            FROM clients 
            WHERE fio LIKE ?
            ORDER BY id DESC
            '''
            
            try:
                cursor.execute(query, (pattern,))
                partial_results = cursor.fetchall()
                if partial_results:
                    results.extend(partial_results)
                    print(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(partial_results)}")
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
                continue
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º (—Ñ–∞–º–∏–ª–∏—è + –∏–º—è)
    if not results:
        search_words = search_term.split()
        if len(search_words) >= 2:
            first_word = search_words[0].strip()
            second_word = search_words[1].strip()
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
            word_variants = []
            for word in [first_word, second_word]:
                word_variants.append([
                    word,
                    word.lower(),
                    word.upper(),
                    word.title()
                ])
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            for first_variants in word_variants[0]:
                for second_variants in word_variants[1]:
                    query = '''
                    SELECT id, client_id, fio, number, car_number, date_dtp, created_at, 
                           COALESCE(data_json, '{}') as data_json
                    FROM clients 
                    WHERE fio LIKE ? AND fio LIKE ?
                    ORDER BY id DESC
                    '''
                    
                    try:
                        cursor.execute(query, (f"%{first_variants}%", f"%{second_variants}%"))
                        word_results = cursor.fetchall()
                        if word_results:
                            results.extend(word_results)
                            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ —Å–ª–æ–≤–∞–º '{first_variants}' + '{second_variants}': {len(word_results)}")
                            break
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º: {e}")
                        continue
                
                if results:
                    break
    
    # 4. –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É (—Ñ–∞–º–∏–ª–∏–∏)
    if not results:
        first_word = search_term.split()[0] if search_term.split() else search_term
        first_word_variants = [
            first_word,
            first_word.lower(),
            first_word.upper(),
            first_word.title()
        ]
        
        for variant in first_word_variants:
            query = '''
            SELECT id, client_id, fio, number, car_number, date_dtp, created_at, 
                   COALESCE(data_json, '{}') as data_json
            FROM clients 
            WHERE fio LIKE ?
            ORDER BY id DESC
            '''
            
            try:
                cursor.execute(query, (f"%{variant}%",))
                surname_results = cursor.fetchall()
                if surname_results:
                    results.extend(surname_results)
                    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ '{variant}': {len(surname_results)}")
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏: {e}")
                continue
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ client_id
    unique_results = []
    seen_client_ids = set()
    
    for result in results:
        client_id = result[1]  # client_id –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 1
        if client_id not in seen_client_ids:
            unique_results.append(result)
            seen_client_ids.add(client_id)
    
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    columns = ['id', 'client_id', 'fio', 'number', 'car_number', 'date_dtp', 'created_at', 'data_json']
    result_dicts = [dict(zip(columns, row)) for row in unique_results]
    
    return result_dicts

def search_clients_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û"""
    search_term = message.text.strip()
    
    if len(search_term) < 2:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        bot.register_next_step_handler(message, search_clients_handler)
        #return_to_main_menu(message)
        return
    
    try:
        print(f"=== –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê ===")
        print(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{search_term}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_msg = bot.send_message(message.chat.id, "üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = search_clients_by_fio_in_db(search_term)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        try:
            bot.delete_message(message.chat.id, search_msg.message_id)
        except:
            pass
        
        if not results:
            bot.send_message(message.chat.id, f"‚ùå –ö–ª–∏–µ–Ω—Ç—ã —Å –§–ò–û '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return_to_main_menu(message)
            return

        show_search_results(message, results, search_term)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return_to_main_menu(message)

def show_search_results(message, results, search_term):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    response = f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}': {len(results)}\n\n"
    
    keyboard = types.InlineKeyboardMarkup()

    for i, client in enumerate(results[:10], 1):
        response += f"{i}. üìã ID: {client['client_id']}\n"
        response += f"   üë§ {client['fio']}\n"
        response += f"   üì± {client.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"   üöó {client.get('car_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"   üìÖ –î–¢–ü: {client.get('date_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"   üïê –î–æ–±–∞–≤–ª–µ–Ω: {client.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        btn_text = f"{i}. {client['fio'][:15]}..."
        btn_callback = f"client_details_{client['client_id']}"
        keyboard.add(types.InlineKeyboardButton(btn_text, callback_data=btn_callback))
    
    if len(results) > 10:
        response += f"... –∏ –µ—â–µ {len(results) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤"

    keyboard.add(types.InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="btn_search_database"))
    keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu"))
    
    bot.send_message(message.chat.id, response, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("client_details_"))
def callback_client_details(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º answer_ins"""
    user_id = call.message.from_user.id
    client_id = call.data.replace("client_details_", "")
    print(f"DEBUG callback_client_details: user_id = {user_id}")
    print(f"DEBUG callback_client_details: client_id = {client_id}")
    try:
        client = get_client_from_db_by_client_id(client_id)
        
        if not client:
            bot.answer_callback_query(call.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            if client.get('data_json'):
                client_data = json.loads(client['data_json'])
            else:
                client_data = {}
        except (json.JSONDecodeError, TypeError):
            client_data = {}
        
        details = f"""üë§ –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞:

üìã ID: {client['client_id']}
üë§ –§–ò–û: {client['fio']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {client.get('car_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –î–∞—Ç–∞ –î–¢–ü: {client.get('date_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üïê –í—Ä–µ–º—è –î–¢–ü: {client_data.get('time_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìç –ê–¥—Ä–µ—Å –î–¢–ü: {client_data.get('address_dtp', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è: {client.get('insurance', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üÜî –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {'–î–∞' if client_data.get('sobstvenik') == 'Yes' else '–ù–µ—Ç'}
"""
        dop_osm =client.get('dop_osm', '') or client_data.get('dop_osm', '')
        answer_ins = client.get('answer_ins', '') or client_data.get('answer_ins', '')
        analis_ins = client.get('analis_ins', '') or client_data.get('analis_ins', '')
        pret = client.get('pret', '') or client_data.get('pret', '')
        pret_sto = client.get('pret_sto', '') or client_data.get('pret_sto', '')
        ombuc = client.get('ombuc', '') or client_data.get('ombuc', '')
        keyboard = types.InlineKeyboardMarkup()
        del client['data_json']
        time.sleep(0.5)
        dtp.user_temp_data[user_id] = client
        if client['accident']=='dtp' and client['Done'] !="Yes":
            if (not dop_osm or dop_osm == '') and (not answer_ins or answer_ins == ''):
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data="dopOsm"
                ))
            elif not answer_ins or answer_ins == '':
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"continuefilling"
                ))
            elif ((analis_ins == '') or (not analis_ins)) and (answer_ins != ''):
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"next"))
            elif (pret_sto == '') or (not pret_sto):
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextPrSto"))
            elif ((pret == '') or (not pret)) and (answer_ins != '') and (analis_ins != ''):
    
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextPr"))
            elif ((ombuc == '') or (not ombuc)) and (answer_ins != '') and (analis_ins != '') and (pret != ''):
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"nextO"))
            elif answer_ins =="NOOSAGO":
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data=f"IskNOOSAGO"))
        elif client['accident']=='pit' and client['Done'] !="Yes":
            if analis_ins =="Yes":
                user_id = call.message.from_user.id
                dtp.user_temp_data[user_id] = client
                time.sleep(0.5)
                details += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                keyboard.add(types.InlineKeyboardButton(
                    "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                    callback_data="pit_next"))
        keyboard.add(types.InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="btn_search_database"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu"))
        keyboard.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="edit_db"))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", callback_data="view_db"))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="view_docs"))
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="download_docs"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=details,
            reply_markup=keyboard
        )
        return CancelUpdate()
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "btn_main_menu")
def callback_main_menu(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = call.message.from_user.id
    if user_id in dtp.user_temp_data:
        del dtp.user_temp_data[user_id]
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="btn_new_client")
    btn2 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ", callback_data="btn_search_database")
    keyboard.add(btn1)
    keyboard.add(btn2)
    clear_chat_history_optimized(call.message, 30)
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
        reply_markup=keyboard
    )

def return_to_main_menu(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    clear_chat_history_optimized(message, 30)
    user_id = message.from_user.id
    if user_id in dtp.user_temp_data:
        del dtp.user_temp_data[user_id]
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="btn_new_client")
    btn2 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ", callback_data="btn_search_database")
    keyboard.add(btn1)
    keyboard.add(btn2)
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
        reply_markup=keyboard
    )
@bot.callback_query_handler(func=lambda call: call.data == "edit_db")
def callback_edit_data(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = call.message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º client_id –∏–∑ temp_data
        client_data = None
        if user_id in dtp.user_temp_data:
            client_data = dtp.user_temp_data[user_id]
        
        if not client_data or 'client_id' not in client_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        client_id = client_data['client_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        full_client_data = get_client_from_db_by_client_id(client_id)
        
        if not full_client_data:
            bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        fio = full_client_data.get('fio', '')
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            if full_client_data.get('data_json'):
                json_data = json.loads(full_client_data['data_json'])
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å JSON –¥–∞–Ω–Ω—ã–º–∏
                merged_data = {**full_client_data, **json_data}
            else:
                merged_data = full_client_data
        except (json.JSONDecodeError, TypeError):
            merged_data = full_client_data
        
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        if 'data_json' in merged_data:
            del merged_data['data_json']
        if 'id' in merged_data:
            del merged_data['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ fio_data.txt
        fio_file_path = os.path.join(str(fio), f"{fio}_data.txt")
        
        if not os.path.exists(fio_file_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            try:
                create_fio_data_file(merged_data)
            except Exception as e:
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(fio_file_path, 'r', encoding='utf-8') as file:
                file_content = file.read()
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
        message_text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {fio}:\n\n{file_content}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ data.txt (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞'):"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        if user_id not in dtp.user_temp_data:
            dtp.user_temp_data[user_id] = {}
        dtp.user_temp_data[user_id]['editing_client'] = {
            'client_id': client_id,
            'fio': fio,
            'file_path': fio_file_path,
            'step': 'parameter',
            'client_data': merged_data
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        new_message = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
        )

        bot.register_next_step_handler(new_message, handle_parameter_input, user_id)
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_edit_data: {e}")
@bot.callback_query_handler(func=lambda call: call.data == "view_db")
def callback_view_data(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = call.message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º client_id –∏–∑ temp_data
        client_data = None
        if user_id in dtp.user_temp_data:
            client_data = dtp.user_temp_data[user_id]
        
        if not client_data or 'client_id' not in client_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        client_id = client_data['client_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        full_client_data = get_client_from_db_by_client_id(client_id)
        
        if not full_client_data:
            bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        fio = full_client_data.get('fio', '')
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            if full_client_data.get('data_json'):
                json_data = json.loads(full_client_data['data_json'])
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å JSON –¥–∞–Ω–Ω—ã–º–∏
                merged_data = {**full_client_data, **json_data}
            else:
                merged_data = full_client_data
        except (json.JSONDecodeError, TypeError):
            merged_data = full_client_data
        
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        if 'data_json' in merged_data:
            del merged_data['data_json']
        if 'id' in merged_data:
            del merged_data['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ fio_data.txt
        fio_file_path = os.path.join(str(fio), f"{fio}_data.txt")
        
        if not os.path.exists(fio_file_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            try:
                create_fio_data_file(merged_data)
            except Exception as e:
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(fio_file_path, 'r', encoding='utf-8') as file:
                file_content = file.read()
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
        message_text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {fio}:\n\n{file_content}"
        

        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")
        keyboard.add(btn1)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        new_message = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_view_data: {e}")


def handle_parameter_input(message, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    
    print(f"DEBUG: user_id = {user_id}")
    print(f"DEBUG: user_temp_data keys = {list(dtp.user_temp_data.keys())}")
    print(f"DEBUG: user in user_temp_data = {user_id in dtp.user_temp_data}")

    if user_id not in dtp.user_temp_data or 'editing_client' not in dtp.user_temp_data[user_id]:
        print("DEBUG: –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return_to_main_menu(message)
        return
    
    parameter_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ data.txt –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    field_mapping = load_field_mapping_from_data_file()
    
    db_field = None
    parameter_lower = parameter_name.lower()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if parameter_lower in field_mapping:
        db_field = field_mapping[parameter_lower]
    else:
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for rus_name, field_name in field_mapping.items():
            if parameter_lower == rus_name:
                db_field = field_name
                break
    
    if not db_field:
        bot.send_message(
            message.chat.id,
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{parameter_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ data.txt. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ."
        )
        bot.register_next_step_handler(message, handle_parameter_input, user_id)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    dtp.user_temp_data[user_id]['editing_client']['parameter'] = parameter_name
    dtp.user_temp_data[user_id]['editing_client']['db_field'] = db_field
    dtp.user_temp_data[user_id]['editing_client']['step'] = 'value'
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    response_message = bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{parameter_name}':"
    )
    
    bot.register_next_step_handler(response_message, handle_value_input, user_id)

def handle_value_input(message, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""

    
    if user_id not in dtp.user_temp_data or 'editing_client' not in dtp.user_temp_data[user_id]:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return_to_main_menu(message)
        return
    
    editing_data = dtp.user_temp_data[user_id]['editing_client']
    parameter_name = editing_data['parameter']
    db_field = editing_data['db_field']
    new_value = message.text.strip()
    client_id = editing_data['client_id']
    client_data = editing_data['client_data']
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_data[db_field] = new_value
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª fio_data.txt —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        create_fio_data_file(client_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_client_in_database(client_id, db_field, new_value)
        
        bot.send_message(
            message.chat.id,
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{parameter_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_value}'"
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in dtp.user_temp_data and 'editing_client' in dtp.user_temp_data[user_id]:
            del dtp.user_temp_data[user_id]['editing_client']
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return_to_main_menu(message)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return_to_main_menu(message)

@bot.callback_query_handler(func=lambda call: call.data == "view_docs")
def callback_view_docs(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user_id = call.message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ temp_data
        client_data = None
        if user_id in dtp.user_temp_data:
            client_data = dtp.user_temp_data[user_id]
        
        if not client_data or 'fio' not in client_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        fio = client_data['fio']
        client_dir = fio  # –ü–∞–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        
        if not os.path.exists(client_dir):
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–ü–∞–ø–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=types.InlineKeyboardMarkup([
                    [types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
        files = []
        try:
            for filename in os.listdir(client_dir):
                if os.path.isfile(os.path.join(client_dir, filename)):
                    files.append(filename)
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return
        
        if not files:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–í –ø–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ '{fio}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤",
                reply_markup=types.InlineKeyboardMarkup([
                    [types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu")]
                ])
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        files_with_time = []
        for filename in files:
            file_path = os.path.join(client_dir, filename)
            try:
                mtime = os.path.getmtime(file_path)
                files_with_time.append((filename, mtime))
            except:
                files_with_time.append((filename, 0))
        
        files_with_time.sort(key=lambda x: x[1], reverse=True)
        sorted_files = [f[0] for f in files_with_time]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        keyboard = types.InlineKeyboardMarkup()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
        message_text = f"–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ '{fio}': {len(sorted_files)}\n\n"
        for i, filename in enumerate(sorted_files, 1):
            message_text += f"{i}. {filename}\n"

        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ (–ø–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
        buttons_per_row = 5
        for i in range(0, len(sorted_files), buttons_per_row):
            row_buttons = []
            for j in range(i, min(i + buttons_per_row, len(sorted_files))):
                button_text = str(j + 1)
                callback_data = f"send_file_{j}"
                row_buttons.append(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            keyboard.row(*row_buttons)

        # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu"))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if user_id not in dtp.user_temp_data:
            dtp.user_temp_data[user_id] = {}
        dtp.user_temp_data[user_id]['files_list'] = sorted_files
        dtp.user_temp_data[user_id]['client_dir'] = client_dir

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_view_docs: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_file_"))
def callback_send_file(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        user_id = call.message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
        file_index = int(call.data.replace("send_file_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ temp_data
        if (user_id not in dtp.user_temp_data or 
            'files_list' not in dtp.user_temp_data[user_id] or 
            'client_dir' not in dtp.user_temp_data[user_id] or
            file_index >= len(dtp.user_temp_data[user_id]['files_list'])):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        filename = dtp.user_temp_data[user_id]['files_list'][file_index]
        client_dir = dtp.user_temp_data[user_id]['client_dir']
        file_path = os.path.join(client_dir, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            bot.answer_callback_query(call.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            with open(file_path, 'rb') as file:
                bot.send_document(
                    call.message.chat.id,
                    file,
                    caption=f"–î–æ–∫—É–º–µ–Ω—Ç: {filename}"
                )
            
            bot.answer_callback_query(call.id, f"–§–∞–π–ª {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        

        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_send_file: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "download_docs")
def callback_download_docs(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user_id = call.message.from_user.id
        print(f"DEBUG callback_download_docs: user_id = {user_id}")
        print(f"DEBUG: user_id in dtp.user_temp_data = {user_id in dtp.user_temp_data}")
        print(f"DEBUG: dtp.user_temp_data keys = {list(dtp.user_temp_data.keys())}")
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ temp_data
        client_data = None
        if user_id in dtp.user_temp_data:
            client_data = dtp.user_temp_data[user_id]
            print(f"DEBUG: client_data keys = {list(client_data.keys()) if client_data else 'None'}")
        else:
            print("DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ temp_data")
        
        if not client_data or 'fio' not in client_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        fio = client_data['fio']
        client_dir = fio  # –ü–∞–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(client_dir):
            os.makedirs(client_dir)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in dtp.user_temp_data:
            dtp.user_temp_data[user_id] = {}
        
        dtp.user_temp_data[user_id]['uploading_docs'] = {
            'active': True,
            'uploaded_count': 0,
            'uploaded_files': [],
            'client_dir': client_dir,
            'fio': fio
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_upload"))
        keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_upload"))
        
        message_text = f"""üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{fio}'

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ç–∏–ø–∞).
–í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞.

–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"."""
        
        new_message = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=keyboard
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        bot.register_next_step_handler(new_message, handle_document_upload, user_id)
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_download_docs: {e}")

def handle_document_upload(message, user_id=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if user_id is None:
        user_id = message.from_user.id
    
    print(f"DEBUG handle_document_upload: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id = {user_id}")
    print(f"DEBUG handle_document_upload: message.from_user.id = {message.from_user.id}")
    print(f"DEBUG handle_document_upload: user_id = {user_id}")
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∏–ø: {type(message)}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
    if (user_id not in dtp.user_temp_data or 
        'uploading_docs' not in dtp.user_temp_data[user_id] or 
        not dtp.user_temp_data[user_id]['uploading_docs']['active']):
        print(f"DEBUG: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è user_id {user_id}")
        print(f"DEBUG: user_id in dtp.user_temp_data = {user_id in dtp.user_temp_data}")
        if user_id in dtp.user_temp_data:
            print(f"DEBUG: –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = {list(dtp.user_temp_data[user_id].keys())}")
        return


    client_dir = dtp.user_temp_data[user_id]['uploading_docs']['client_dir']
    print(f"DEBUG: –ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {client_dir}")
    print(f"DEBUG: –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(client_dir)}")
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(client_dir):
        os.makedirs(client_dir)
        print(f"DEBUG: –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {client_dir}")

    try:
        uploaded_file = None
        filename = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if message.document:
            uploaded_file = message.document
            filename = uploaded_file.file_name or f"document_{uploaded_file.file_id}.bin"
        elif message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            uploaded_file = message.photo[-1]
            filename = f"photo_{uploaded_file.file_id}.jpg"
        elif message.video:
            uploaded_file = message.video
            filename = uploaded_file.file_name or f"video_{uploaded_file.file_id}.mp4"
        elif message.audio:
            uploaded_file = message.audio
            filename = uploaded_file.file_name or f"audio_{uploaded_file.file_id}.mp3"
        elif message.voice:
            uploaded_file = message.voice
            filename = f"voice_{uploaded_file.file_id}.ogg"
        elif message.video_note:
            uploaded_file = message.video_note
            filename = f"video_note_{uploaded_file.file_id}.mp4"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
            if message.text in ["–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", "–û—Ç–º–µ–Ω–∞"]:
                return
            
            bot.send_message(
                message.chat.id,
                "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ."
            )
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª
            bot.register_next_step_handler(message, handle_document_upload, user_id)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(uploaded_file.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        client_dir = dtp.user_temp_data[user_id]['uploading_docs']['client_dir']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        original_filename = filename
        counter = 1
        while os.path.exists(os.path.join(client_dir, filename)):
            name, ext = os.path.splitext(original_filename)
            filename = f"{name}_{counter}{ext}"
            counter += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        file_path = os.path.join(client_dir, filename)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        dtp.user_temp_data[user_id]['uploading_docs']['uploaded_count'] += 1
        dtp.user_temp_data[user_id]['uploading_docs']['uploaded_files'].append(filename)
        
        uploaded_count = dtp.user_temp_data[user_id]['uploading_docs']['uploaded_count']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_upload"))
        keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_upload"))
        
        response_text = f"‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploaded_count}\n\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É."
        
        response_message = bot.send_message(
            message.chat.id,
            response_text,
            reply_markup=keyboard
        )
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        bot.register_next_step_handler(response_message, handle_document_upload, user_id)
        
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        bot.register_next_step_handler(message, handle_document_upload, user_id)
def update_client_in_database(client_id, db_field, new_value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = DatabaseManager()
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = get_client_from_db_by_client_id(client_id)
        if not client:
            raise Exception(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        try:
            if client.get('data_json'):
                data_json = json.loads(client['data_json'])
            else:
                data_json = {}
        except (json.JSONDecodeError, TypeError):
            data_json = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data_json[db_field] = new_value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(clients)")
        columns_info = cursor.fetchall()
        table_columns = [col[1] for col in columns_info]
        
        if db_field in table_columns:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
            update_query = f"UPDATE clients SET {db_field} = ?, data_json = ? WHERE client_id = ?"
            cursor.execute(update_query, (new_value, json.dumps(data_json, ensure_ascii=False), client_id))
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ {db_field}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ JSON
            update_query = "UPDATE clients SET data_json = ? WHERE client_id = ?"
            cursor.execute(update_query, (json.dumps(data_json, ensure_ascii=False), client_id))
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {db_field} –≤ JSON")
        
        conn.commit()
        conn.close()
        
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise e
def load_field_mapping_from_data_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ data.txt"""
    field_mapping = {}
    
    try:
        with open('data.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        for line in lines:
            line = line.strip()
            if ':' in line:
                field_name, variable = line.split(':', 1)
                field_name = field_name.strip()
                variable = variable.strip()
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥: —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                field_mapping[field_name.lower()] = variable
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(field_mapping)} –ø–æ–ª–µ–π –∏–∑ data.txt")
        return field_mapping
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π: {e}")
        return {}
@bot.callback_query_handler(func=lambda call: call.data == "finish_upload")
def callback_finish_upload(call):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user_id = call.message.from_user.id
        
        if (user_id not in dtp.user_temp_data or 
            'uploading_docs' not in dtp.user_temp_data[user_id]):
            bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return_to_main_menu_from_call(call)
            return
        
        upload_data = dtp.user_temp_data[user_id]['uploading_docs']
        uploaded_count = upload_data['uploaded_count']
        uploaded_files = upload_data['uploaded_files']
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        dtp.user_temp_data[user_id]['uploading_docs']['active'] = False
        
        if uploaded_count > 0:
            files_list = '\n'.join([f"‚Ä¢ {filename}" for filename in uploaded_files])
            message_text = f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploaded_count}\n\n–§–∞–π–ª—ã:\n{files_list}"
        else:
            message_text = "–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'uploading_docs' in dtp.user_temp_data[user_id]:
            del dtp.user_temp_data[user_id]['uploading_docs']
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        time.sleep(2)
        return_to_main_menu_from_call(call)
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_finish_upload: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_upload")
def callback_cancel_upload(call):
    try:
        user_id = call.message.from_user.id
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (user_id in dtp.user_temp_data and 
            'uploading_docs' in dtp.user_temp_data[user_id]):
            dtp.user_temp_data[user_id]['uploading_docs']['active'] = False
            del dtp.user_temp_data[user_id]['uploading_docs']
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        
        time.sleep(1)
        return_to_main_menu_from_call(call)
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_cancel_upload: {e}")

def return_to_main_menu_from_call(call):
    clear_chat_history_optimized(call.message, 30)
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback"""
    try:
        user_id = call.message.from_user.id
        if user_id in dtp.user_temp_data:
            del dtp.user_temp_data[user_id]
        
        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="btn_new_client")
        btn2 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ", callback_data="btn_search_database")
        keyboard.add(btn1)
        keyboard.add(btn2)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="btn_new_client")
        btn2 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ", callback_data="btn_search_database")
        keyboard.add(btn1)
        keyboard.add(btn2)
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=keyboard
        )
@bot.callback_query_handler(func=lambda call: call.data == "show_more_files")
def callback_show_more_files(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤"""
    try:
        user_id = call.message.from_user.id
        
        if (user_id not in dtp.user_temp_data or 
            'files_list' not in dtp.user_temp_data[user_id]):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        files_list = dtp.user_temp_data[user_id]['files_list']
        client_dir = dtp.user_temp_data[user_id]['client_dir']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏
        keyboard = types.InlineKeyboardMarkup()
        
        for i, filename in enumerate(files_list):
            display_name = filename
            if len(display_name) > 30:
                display_name = display_name[:27] + "..."
            
            callback_data = f"send_file_{i}"
            keyboard.add(types.InlineKeyboardButton(display_name, callback_data=callback_data))
        
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_main_menu"))
        
        message_text = f"–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({len(files_list)}):\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ callback_show_more_files: {e}")

def clear_chat_history_optimized(message, count):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    chat_id = message.chat.id
    current_message_id = message.message_id
    deleted_count = 0
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    for message_id in range(current_message_id, max(1, current_message_id - count), -1):
        try:
            bot.delete_message(chat_id=chat_id, message_id=message_id)
            deleted_count += 1
        except ApiException as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if "message to delete not found" in str(e).lower():
                continue
            elif "message can't be deleted" in str(e).lower():
                continue
            elif "too many requests" in str(e).lower():
                time.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
                continue
        except Exception:
            continue
        


if __name__ == '__main__':
    bot.infinity_polling()